docker pull ubuntu -  letölti az ubuntu imaget a localis gépemre

docker run -it ubuntu - futtatja az ubuntu a localis gépemen

COPY . . - lemésol minden a könyvtárunkból a docker image-nek, az első "." az aktuális könyvtár, a második "." pedig az aktuális könyvtá a docker containeren belül


docker build -t hello-docker . - felépítjók a hello-docker containert

docker images - imagek felsorolása local gépen

docker run hello-docker - futtatjuk a dockert image-et

docker run -it hello-docker sh - biztosítja, hogy az OP-ban futtassuk az alkalmazást

docker run -p 5173:5173 react-docker - ezzel biztosítani tudjuk, hogy az alkalmazás a 5173-as porton megjelenjen a gépünkön

docker ps - listázza az összes containert ami éppen fut

docker ps -a -  az összs containert megjeleníti amit eddig csináltunk

docker stop [CONTAINER ID or NAME] - az id-val meghatározott containert meg fogja állítani

docker conatiner prune - az összea containert leállítja

docker rm [CONTAINERT ID] töröljük a meghatározott image-et

docker run -p 5173:5173 -v "$(pwd):/app" -v /app/node_modules react-docker - így már minden frissítés amit véghezviszünk frissül a dockerben is

docker login - belépés a dockerbe

docker tag react-docker kovacsaronlaszlo/react-docker - publikussá tesszük az image-et

docker push kovacsaronlaszlo/react-docker -  feltöltjük a docker hubra image-et

docker init-tel fel tudjuk építeni a docker környezetet az applikációnkhoz (kérdésekre válaszolva adva meg a környezeteti értékeket)
pl:
? What application platform does your project use? Node
? What version of Node do you want to use? 20
? Which package manager do you want to use? npm
? Do you want to run "npm run build" before starting your server? No
? What command do you want to use to start the app? npm run dev
? What port does your server listen on? 5173


docker compose up - compose.yaml fájl segítségével elvégzi a fontosabb docker események és elindítja az alkalmazást

docker compose watch - változásokat fogjuk figyelni vele és végrahajtani